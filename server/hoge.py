{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import json\n",
    "from collections import defaultdict\n",
    "import numpy as np\n",
    "import math\n",
    "from tqdm.notebook import tqdm_notebook as tqdm\n",
    "import matplotlib.patches as pat\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'concepts' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-2-98767e6a623d>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0mcounter\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdefaultdict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;32mlambda\u001b[0m \u001b[0;34m:\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0mappear\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdefaultdict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;32mlambda\u001b[0m \u001b[0;34m:\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 3\u001b[0;31m \u001b[0;32mfor\u001b[0m \u001b[0mresource\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mconcepts\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'resources'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      4\u001b[0m     \u001b[0mr_name\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mresource\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'name'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m     \u001b[0;32mfor\u001b[0m \u001b[0md\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mresource\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'schema'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'fields'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mNameError\u001b[0m: name 'concepts' is not defined"
     ]
    }
   ],
   "source": [
    "counter = defaultdict(lambda :0)\n",
    "appear = defaultdict(lambda :[])\n",
    "for resource in concepts['resources'][1:]:\n",
    "    r_name = resource['name']\n",
    "    for d in resource['schema']['fields']:\n",
    "        counter[d['name']] += 1\n",
    "        appear[d['name']].append(r_name)\n",
    "cnt2ind = defaultdict(lambda: [])\n",
    "for k, v in counter.items():\n",
    "    cnt2ind[v].append(k)\n",
    "for cnt in sorted(cnt2ind.keys()):\n",
    "    print(cnt, cnt2ind[cnt])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>name</th>\n",
       "      <th>region</th>\n",
       "      <th>income</th>\n",
       "      <th>population</th>\n",
       "      <th>lifeExpectancy</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Angola</td>\n",
       "      <td>Sub-Saharan Africa</td>\n",
       "      <td>[[1800, 359.93], [1820, 359.93], [1913, 556.12...</td>\n",
       "      <td>[[1800, 1567028], [1820, 1567028], [1940, 3738...</td>\n",
       "      <td>[[1800, 26.98], [1940, 26.98], [1950, 29.22], ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Benin</td>\n",
       "      <td>Sub-Saharan Africa</td>\n",
       "      <td>[[1800, 553.72], [1820, 553.72], [1913, 855.53...</td>\n",
       "      <td>[[1800, 636559], [1820, 636559], [1950, 167266...</td>\n",
       "      <td>[[1800, 31], [1944, 31], [1950, 36.53], [1951,...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Botswana</td>\n",
       "      <td>Sub-Saharan Africa</td>\n",
       "      <td>[[1800, 407.36], [1820, 407.36], [1913, 629.4]...</td>\n",
       "      <td>[[1800, 121000], [1904, 121000], [1911, 125000...</td>\n",
       "      <td>[[1800, 33.6], [1945, 33.6], [1950, 46.82], [1...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Burkina Faso</td>\n",
       "      <td>Sub-Saharan Africa</td>\n",
       "      <td>[[1800, 454.33], [1820, 454.33], [1913, 497.44...</td>\n",
       "      <td>[[1800, 1665421], [1820, 1665421], [1950, 4376...</td>\n",
       "      <td>[[1800, 29.2], [1945, 29.2], [1950, 32.89], [1...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Burundi</td>\n",
       "      <td>Sub-Saharan Africa</td>\n",
       "      <td>[[1800, 447.59], [1820, 447.59], [1913, 353.82...</td>\n",
       "      <td>[[1800, 899097], [1820, 899097], [1950, 236252...</td>\n",
       "      <td>[[1800, 31.5], [1945, 31.5], [1950, 38.42], [1...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>175</th>\n",
       "      <td>Timor-Leste</td>\n",
       "      <td>East Asia &amp; Pacific</td>\n",
       "      <td>[[1800, 514.12], [1820, 518.73], [1850, 539.86...</td>\n",
       "      <td>[[1800, 137262], [1820, 137262], [1926, 442000...</td>\n",
       "      <td>[[1950, 28.97], [1951, 29.22], [1952, 29.73], ...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>176</th>\n",
       "      <td>Tokelau</td>\n",
       "      <td>East Asia &amp; Pacific</td>\n",
       "      <td>[[2005, 889.43]]</td>\n",
       "      <td>[[1800, 1009], [1843, 1000], [1850, 1000], [19...</td>\n",
       "      <td>[[2006, 69]]</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>177</th>\n",
       "      <td>Tonga</td>\n",
       "      <td>East Asia &amp; Pacific</td>\n",
       "      <td>[[1800, 667.71], [1820, 667.71], [1913, 902.69...</td>\n",
       "      <td>[[1800, 18658], [1843, 18500], [1850, 18500], ...</td>\n",
       "      <td>[[1950, 57.91], [1951, 58.1], [1952, 58.47], [...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>178</th>\n",
       "      <td>Vietnam</td>\n",
       "      <td>East Asia &amp; Pacific</td>\n",
       "      <td>[[1800, 459.71], [1820, 459.71], [1870, 440.8]...</td>\n",
       "      <td>[[1800, 6551000], [1820, 6551000], [1870, 1052...</td>\n",
       "      <td>[[1800, 32], [1930, 32], [1936, 33], [1950, 39...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>179</th>\n",
       "      <td>Vanuatu</td>\n",
       "      <td>East Asia &amp; Pacific</td>\n",
       "      <td>[[1800, 829.58], [1820, 829.58], [1913, 1121.5...</td>\n",
       "      <td>[[1800, 27791], [1820, 27791], [1950, 52000], ...</td>\n",
       "      <td>[[1950, 40.8], [1951, 41.1], [1952, 41.7], [19...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>180 rows Ã— 5 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "             name               region  \\\n",
       "0          Angola   Sub-Saharan Africa   \n",
       "1           Benin   Sub-Saharan Africa   \n",
       "2        Botswana   Sub-Saharan Africa   \n",
       "3    Burkina Faso   Sub-Saharan Africa   \n",
       "4         Burundi   Sub-Saharan Africa   \n",
       "..            ...                  ...   \n",
       "175   Timor-Leste  East Asia & Pacific   \n",
       "176       Tokelau  East Asia & Pacific   \n",
       "177         Tonga  East Asia & Pacific   \n",
       "178       Vietnam  East Asia & Pacific   \n",
       "179       Vanuatu  East Asia & Pacific   \n",
       "\n",
       "                                                income  \\\n",
       "0    [[1800, 359.93], [1820, 359.93], [1913, 556.12...   \n",
       "1    [[1800, 553.72], [1820, 553.72], [1913, 855.53...   \n",
       "2    [[1800, 407.36], [1820, 407.36], [1913, 629.4]...   \n",
       "3    [[1800, 454.33], [1820, 454.33], [1913, 497.44...   \n",
       "4    [[1800, 447.59], [1820, 447.59], [1913, 353.82...   \n",
       "..                                                 ...   \n",
       "175  [[1800, 514.12], [1820, 518.73], [1850, 539.86...   \n",
       "176                                   [[2005, 889.43]]   \n",
       "177  [[1800, 667.71], [1820, 667.71], [1913, 902.69...   \n",
       "178  [[1800, 459.71], [1820, 459.71], [1870, 440.8]...   \n",
       "179  [[1800, 829.58], [1820, 829.58], [1913, 1121.5...   \n",
       "\n",
       "                                            population  \\\n",
       "0    [[1800, 1567028], [1820, 1567028], [1940, 3738...   \n",
       "1    [[1800, 636559], [1820, 636559], [1950, 167266...   \n",
       "2    [[1800, 121000], [1904, 121000], [1911, 125000...   \n",
       "3    [[1800, 1665421], [1820, 1665421], [1950, 4376...   \n",
       "4    [[1800, 899097], [1820, 899097], [1950, 236252...   \n",
       "..                                                 ...   \n",
       "175  [[1800, 137262], [1820, 137262], [1926, 442000...   \n",
       "176  [[1800, 1009], [1843, 1000], [1850, 1000], [19...   \n",
       "177  [[1800, 18658], [1843, 18500], [1850, 18500], ...   \n",
       "178  [[1800, 6551000], [1820, 6551000], [1870, 1052...   \n",
       "179  [[1800, 27791], [1820, 27791], [1950, 52000], ...   \n",
       "\n",
       "                                        lifeExpectancy  \n",
       "0    [[1800, 26.98], [1940, 26.98], [1950, 29.22], ...  \n",
       "1    [[1800, 31], [1944, 31], [1950, 36.53], [1951,...  \n",
       "2    [[1800, 33.6], [1945, 33.6], [1950, 46.82], [1...  \n",
       "3    [[1800, 29.2], [1945, 29.2], [1950, 32.89], [1...  \n",
       "4    [[1800, 31.5], [1945, 31.5], [1950, 38.42], [1...  \n",
       "..                                                 ...  \n",
       "175  [[1950, 28.97], [1951, 29.22], [1952, 29.73], ...  \n",
       "176                                       [[2006, 69]]  \n",
       "177  [[1950, 57.91], [1951, 58.1], [1952, 58.47], [...  \n",
       "178  [[1800, 32], [1930, 32], [1936, 33], [1950, 39...  \n",
       "179  [[1950, 40.8], [1951, 41.1], [1952, 41.7], [19...  \n",
       "\n",
       "[180 rows x 5 columns]"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "nations = pd.read_json('../public/nations.json')\n",
    "nations"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "1b9ee381fb3b4e269ef62c1ead296908",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "HBox(children=(HTML(value=''), FloatProgress(value=0.0, max=180.0), HTML(value='')))"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>income</th>\n",
       "      <th>population</th>\n",
       "      <th>lifeExpectancy</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>name</th>\n",
       "      <th>year</th>\n",
       "      <th>region</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"5\" valign=\"top\">Angola</th>\n",
       "      <th>1800-01-01</th>\n",
       "      <th>Sub-Saharan Africa</th>\n",
       "      <td>359.93</td>\n",
       "      <td>1567028.0</td>\n",
       "      <td>26.98</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1801-01-01</th>\n",
       "      <th>Sub-Saharan Africa</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1802-01-01</th>\n",
       "      <th>Sub-Saharan Africa</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1803-01-01</th>\n",
       "      <th>Sub-Saharan Africa</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1804-01-01</th>\n",
       "      <th>Sub-Saharan Africa</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <th>...</th>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"5\" valign=\"top\">Vanuatu</th>\n",
       "      <th>2005-01-01</th>\n",
       "      <th>East Asia &amp; Pacific</th>\n",
       "      <td>3477.00</td>\n",
       "      <td>205754.0</td>\n",
       "      <td>69.26</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2006-01-01</th>\n",
       "      <th>East Asia &amp; Pacific</th>\n",
       "      <td>3632.57</td>\n",
       "      <td>208869.0</td>\n",
       "      <td>69.58</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2007-01-01</th>\n",
       "      <th>East Asia &amp; Pacific</th>\n",
       "      <td>3779.08</td>\n",
       "      <td>211971.0</td>\n",
       "      <td>69.89</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2008-01-01</th>\n",
       "      <th>East Asia &amp; Pacific</th>\n",
       "      <td>3916.57</td>\n",
       "      <td>215053.0</td>\n",
       "      <td>70.20</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2009-01-01</th>\n",
       "      <th>East Asia &amp; Pacific</th>\n",
       "      <td>3943.30</td>\n",
       "      <td>NaN</td>\n",
       "      <td>70.50</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>37800 rows Ã— 3 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                                         income  population  lifeExpectancy\n",
       "name    year       region                                                  \n",
       "Angola  1800-01-01 Sub-Saharan Africa    359.93   1567028.0           26.98\n",
       "        1801-01-01 Sub-Saharan Africa       NaN         NaN             NaN\n",
       "        1802-01-01 Sub-Saharan Africa       NaN         NaN             NaN\n",
       "        1803-01-01 Sub-Saharan Africa       NaN         NaN             NaN\n",
       "        1804-01-01 Sub-Saharan Africa       NaN         NaN             NaN\n",
       "...                                         ...         ...             ...\n",
       "Vanuatu 2005-01-01 East Asia & Pacific  3477.00    205754.0           69.26\n",
       "        2006-01-01 East Asia & Pacific  3632.57    208869.0           69.58\n",
       "        2007-01-01 East Asia & Pacific  3779.08    211971.0           69.89\n",
       "        2008-01-01 East Asia & Pacific  3916.57    215053.0           70.20\n",
       "        2009-01-01 East Asia & Pacific  3943.30         NaN           70.50\n",
       "\n",
       "[37800 rows x 3 columns]"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "inds = 'name year region income population lifeExpectancy'.split()\n",
    "new_nations = pd.DataFrame({k: [] for k in inds}, index=[])\n",
    "for nation in tqdm(nations.iterrows(), total=len(nations)):\n",
    "    d = defaultdict(lambda: {k: None for k in inds[3:]})\n",
    "    for k in inds[3:]:\n",
    "        for year, v in nation[1][k]:\n",
    "            d[year][k] = v\n",
    "    for year in range(1800, 2010):\n",
    "        d_tmp = dict(name=nation[1]['name'], year=year, region=nation[1]['region'])\n",
    "        d_tmp.update(d[year])\n",
    "        new_nations = new_nations.append(d_tmp, ignore_index=True)\n",
    "new_nations = new_nations.astype({'name': str, 'year': int, 'region': str, 'income': float, 'population': float, 'lifeExpectancy': float})\n",
    "new_nations['year'] = pd.to_datetime(new_nations['year'], format='%Y')\n",
    "new_nations_ = new_nations.set_index(['name', 'year'])\n",
    "new_nations__ = new_nations.set_index(['name', 'year', 'region'])\n",
    "new_nations__"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>name</th>\n",
       "      <th>region</th>\n",
       "      <th>income</th>\n",
       "      <th>population</th>\n",
       "      <th>lifeExpectancy</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>year</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1800-01-01</th>\n",
       "      <td>Angola</td>\n",
       "      <td>Sub-Saharan Africa</td>\n",
       "      <td>359.93</td>\n",
       "      <td>1567028.0</td>\n",
       "      <td>26.98</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1801-01-01</th>\n",
       "      <td>Angola</td>\n",
       "      <td>Sub-Saharan Africa</td>\n",
       "      <td>359.93</td>\n",
       "      <td>1567028.0</td>\n",
       "      <td>26.98</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1802-01-01</th>\n",
       "      <td>Angola</td>\n",
       "      <td>Sub-Saharan Africa</td>\n",
       "      <td>359.93</td>\n",
       "      <td>1567028.0</td>\n",
       "      <td>26.98</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1803-01-01</th>\n",
       "      <td>Angola</td>\n",
       "      <td>Sub-Saharan Africa</td>\n",
       "      <td>359.93</td>\n",
       "      <td>1567028.0</td>\n",
       "      <td>26.98</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1804-01-01</th>\n",
       "      <td>Angola</td>\n",
       "      <td>Sub-Saharan Africa</td>\n",
       "      <td>359.93</td>\n",
       "      <td>1567028.0</td>\n",
       "      <td>26.98</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2005-01-01</th>\n",
       "      <td>Angola</td>\n",
       "      <td>Sub-Saharan Africa</td>\n",
       "      <td>3533.00</td>\n",
       "      <td>11827315.0</td>\n",
       "      <td>45.52</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2006-01-01</th>\n",
       "      <td>Angola</td>\n",
       "      <td>Sub-Saharan Africa</td>\n",
       "      <td>4069.56</td>\n",
       "      <td>12127071.0</td>\n",
       "      <td>46.02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2007-01-01</th>\n",
       "      <td>Angola</td>\n",
       "      <td>Sub-Saharan Africa</td>\n",
       "      <td>4755.46</td>\n",
       "      <td>12420476.0</td>\n",
       "      <td>46.54</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2008-01-01</th>\n",
       "      <td>Angola</td>\n",
       "      <td>Sub-Saharan Africa</td>\n",
       "      <td>5228.74</td>\n",
       "      <td>12707546.0</td>\n",
       "      <td>47.06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2009-01-01</th>\n",
       "      <td>Angola</td>\n",
       "      <td>Sub-Saharan Africa</td>\n",
       "      <td>5055.59</td>\n",
       "      <td>12707546.0</td>\n",
       "      <td>47.58</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>210 rows Ã— 5 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "              name              region   income  population  lifeExpectancy\n",
       "year                                                                       \n",
       "1800-01-01  Angola  Sub-Saharan Africa   359.93   1567028.0           26.98\n",
       "1801-01-01  Angola  Sub-Saharan Africa   359.93   1567028.0           26.98\n",
       "1802-01-01  Angola  Sub-Saharan Africa   359.93   1567028.0           26.98\n",
       "1803-01-01  Angola  Sub-Saharan Africa   359.93   1567028.0           26.98\n",
       "1804-01-01  Angola  Sub-Saharan Africa   359.93   1567028.0           26.98\n",
       "...            ...                 ...      ...         ...             ...\n",
       "2005-01-01  Angola  Sub-Saharan Africa  3533.00  11827315.0           45.52\n",
       "2006-01-01  Angola  Sub-Saharan Africa  4069.56  12127071.0           46.02\n",
       "2007-01-01  Angola  Sub-Saharan Africa  4755.46  12420476.0           46.54\n",
       "2008-01-01  Angola  Sub-Saharan Africa  5228.74  12707546.0           47.06\n",
       "2009-01-01  Angola  Sub-Saharan Africa  5055.59  12707546.0           47.58\n",
       "\n",
       "[210 rows x 5 columns]"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_nations.groupby('name').get_group('Angola').sort_values('year').set_index('year').interpolate('time')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x7fee4a5feb90>"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "g = new_nations.groupby('name')\n",
    "for k in g.groups.keys():\n",
    "    df = g.get_group(k).sort_values('year').set_index('year').interpolate('time')\n",
    "    break\n",
    "sns.lineplot(x=range(1800, 2010), y='income', data=df)\n",
    "p = peaks(df['income'], 5)\n",
    "for x in np.argsort(p)[::-1][:5]:\n",
    "    x += 1800\n",
    "    plt.plot([x, x], [0, 1200])\n",
    "sns.lineplot(range(1800, 2010), p)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "metadata": {},
   "outputs": [],
   "source": [
    "def c(ys):\n",
    "    y_mean = np.mean(ys)\n",
    "    return np.sum(np.abs(ys-y_mean))\n",
    "\n",
    "def d(ys1, ys2):\n",
    "    return c(pd.concat([ys1, ys2])) - c(ys1) - c(ys2)\n",
    "\n",
    "\n",
    "# salient peaks\n",
    "def A(ys, window_size, K=5):\n",
    "    peaks = []\n",
    "    for i in range(1, len(ys)-1):\n",
    "        if max(ys[i-1], ys[i+1]) < ys[i]:\n",
    "            peaks.append((int(max(0, i-window_size//2)), int(min(len(ys), i+window_size//2)), 'peak', d(ys[max(0, i-window_size//2):i], ys[i:i+window_size//2])))\n",
    "        elif min(ys[i-1], ys[i+1]) > ys[i]:\n",
    "            peaks.append((int(max(0, i-window_size//2)), int(min(len(ys), i+window_size//2)), 'valley', d(ys[max(0, i-window_size//2):i], ys[i:i+window_size//2])))\n",
    "        else:\n",
    "            pass\n",
    "    peaks = sorted(peaks, key=lambda x: x[3])[::-1][:K]\n",
    "    peaks = sorted(peaks, key=lambda x: x[0])\n",
    "    ret = []\n",
    "    pre_from_, pre_to_, p_type_pre, v = peaks[0]\n",
    "    if v == 0:\n",
    "        return ret\n",
    "    for from_, to_, p_type, v in peaks[1:]:\n",
    "        if v == 0:\n",
    "            ret.append((pre_from_, pre_to_, p_type_pre))\n",
    "            break\n",
    "        if pre_to_ >= from_:\n",
    "            pre_to_ = to_\n",
    "            if p_type_pre != p_type:\n",
    "                p_type_pre = 'vibration'\n",
    "        else:\n",
    "            ret.append((pre_from_, pre_to_, p_type_pre))\n",
    "            pre_from_, pre_to_, p_type_pre = from_, to_, p_type\n",
    "    ret.append((pre_from_, pre_to_, p_type_pre))\n",
    "    return ret\n",
    "\n",
    "\n",
    "        \n",
    "def get_grad(ys):\n",
    "    if len(ys)==0:\n",
    "        return 0\n",
    "    ys = np.array(ys).reshape(-1)\n",
    "    a, b = np.linalg.lstsq(np.array([[i, 1] for i in range(len(ys))]), ys)[0]\n",
    "    return a\n",
    "\n",
    "\n",
    "# trend changes\n",
    "def B(ys, window_size, k_sigma=3):\n",
    "    grad_diff = []\n",
    "    for i in range(len(ys)):\n",
    "        grad_former = get_grad(ys[max(0, i-window_size//2):i])\n",
    "        grad_latter = get_grad(ys[i:i+window_size//2])\n",
    "        grad_diff.append(grad_former-grad_latter)\n",
    "    x = np.array(grad_diff)\n",
    "    xmean = x.mean(axis=0)\n",
    "    xstd  = np.std(x, axis=0)\n",
    "    change_points = []\n",
    "    for i in range(len(x)):\n",
    "        if x[i] < xmean-k_sigma*xstd:\n",
    "            change_points.append((int(max(0, i-window_size//2)), int(min(len(ys), i+window_size//2)), 'trend_increase'))\n",
    "        elif xmean+k_sigma*xstd < x[i]:\n",
    "            change_points.append((int(max(0, i-window_size//2)), int(min(len(ys), i+window_size//2)), 'trend_decrease'))\n",
    "\n",
    "    ret = []\n",
    "    if len(change_points)==0:\n",
    "        return ret\n",
    "\n",
    "    pre_from_, pre_to_, p_type_pre = change_points[0]\n",
    "    for from_, to_, p_type in change_points[1:]:\n",
    "        if pre_to_ >= from_:\n",
    "            pre_to_ = to_\n",
    "            if p_type_pre != p_type:\n",
    "                p_type_pre = 'trend_confusion'\n",
    "        else:\n",
    "            ret.append((pre_from_, pre_to_, p_type_pre))\n",
    "            pre_from_, pre_to_, p_type_pre = from_, to_, p_type\n",
    "    ret.append((pre_from_, pre_to_, p_type_pre))\n",
    "    return ret\n",
    "\n",
    "\n",
    "def large_grad(ys, window_size, k_sigma=3):\n",
    "    grads = [get_grad(ys[max(0, i-window_size//2):i+window_size//2]) for i in range(len(ys))]\n",
    "    x = np.array(grads)\n",
    "    xmean = x.mean(axis=0)\n",
    "    xstd  = np.std(x, axis=0)\n",
    "    large_grad_points = []\n",
    "    for i in range(len(x)):\n",
    "        if x[i] < xmean-k_sigma*xstd:\n",
    "            large_grad_points.append((int(max(0, i-window_size//2)), int(min(len(ys), i+window_size//2)), 'neg_grad'))\n",
    "        elif xmean+k_sigma*xstd < x[i]:\n",
    "            large_grad_points.append((int(max(0, i-window_size//2)), int(min(len(ys), i+window_size//2)), 'pos_grad'))\n",
    "    ret = []\n",
    "    if len(large_grad_points)==0:\n",
    "        return ret\n",
    "\n",
    "    pre_from_, pre_to_, p_type_pre = large_grad_points[0]\n",
    "    for from_, to_, p_type in large_grad_points[1:]:\n",
    "        if pre_to_ >= from_ and p_type_pre == p_type:\n",
    "            pre_to_ = to_\n",
    "        else:\n",
    "            ret.append((pre_from_, pre_to_, p_type_pre))\n",
    "            pre_from_, pre_to_, p_type_pre = from_, to_, p_type\n",
    "    ret.append((pre_from_, pre_to_, p_type_pre))\n",
    "    return ret\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/hirotanaka/.pyenv/versions/miniconda3-4.3.30/envs/tdb/lib/python3.7/site-packages/ipykernel_launcher.py:45: FutureWarning: `rcond` parameter will change to the default of machine precision times ``max(M, N)`` where M and N are the input matrix dimensions.\n",
      "To use the future default and silence this warning we advise to pass `rcond=None`, to keep using the old, explicitly pass `rcond=-1`.\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/hirotanaka/.pyenv/versions/miniconda3-4.3.30/envs/tdb/lib/python3.7/site-packages/ipykernel_launcher.py:45: FutureWarning: `rcond` parameter will change to the default of machine precision times ``max(M, N)`` where M and N are the input matrix dimensions.\n",
      "To use the future default and silence this warning we advise to pass `rcond=None`, to keep using the old, explicitly pass `rcond=-1`.\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "\n",
    "ind = 'income'\n",
    "window_size_A = 6\n",
    "window_size_B = 4\n",
    "window_size_C = 4\n",
    "\n",
    "g = new_nations.groupby('name')\n",
    "for k in g.groups.keys():\n",
    "    df = g.get_group(k).sort_values('year').set_index('year').interpolate('time')\n",
    "    break\n",
    "ys = df[ind]\n",
    "\n",
    "\n",
    "fig = plt.figure(figsize=(10, 5))\n",
    "ax = fig.add_subplot(111)\n",
    "sns.lineplot(x=range(1800, 2010), y=ind, data=df)\n",
    "for from_, to_, ptype in A(ys, window_size_A):\n",
    "    from_ += 1800\n",
    "    to_ += 1800\n",
    "    ax.add_patch(pat.Rectangle(xy=(from_, 0), width=to_-from_, height=1200, color='red', alpha=0.2))\n",
    "    x = (from_+to_)/2\n",
    "    # plt.plot([x, x], [0, 1200])\n",
    "plt.show()\n",
    "\n",
    "\n",
    "fig = plt.figure(figsize=(10, 5))\n",
    "ax = fig.add_subplot(111)\n",
    "sns.lineplot(x=range(1800, 2010), y=ind, data=df)\n",
    "for from_, to_, ptype in B(ys, window_size_B, k_sigma=3):\n",
    "    from_ += 1800\n",
    "    to_ += 1800\n",
    "    ax.add_patch(pat.Rectangle(xy=(from_, 0), width=to_-from_, height=1200, color='blue', alpha=0.2))\n",
    "    x = (from_+to_)/2\n",
    "    # plt.plot([x, x], [0, 1200])\n",
    "plt.show()\n",
    "\n",
    "\n",
    "fig = plt.figure(figsize=(10, 5))\n",
    "ax = fig.add_subplot(111)\n",
    "sns.lineplot(x=range(1800, 2010), y=ind, data=df)\n",
    "for from_, to_, ptype in large_grad(ys, window_size_C, k_sigma=3):\n",
    "    from_ += 1800\n",
    "    to_ += 1800\n",
    "    ax.add_patch(pat.Rectangle(xy=(from_, 0), width=to_-from_, height=1200, facecolor='blue', edgecolor='red', alpha=0.2))\n",
    "    x = (from_+to_)/2\n",
    "    # plt.plot([x, x], [0, 1200])\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Help on class Rectangle in module matplotlib.patches:\n",
      "\n",
      "class Rectangle(Patch)\n",
      " |  Rectangle(xy, width, height, angle=0.0, **kwargs)\n",
      " |  \n",
      " |  A rectangle with lower left at *xy* = (*x*, *y*) with\n",
      " |  specified *width*, *height* and rotation *angle*.\n",
      " |  \n",
      " |  Method resolution order:\n",
      " |      Rectangle\n",
      " |      Patch\n",
      " |      matplotlib.artist.Artist\n",
      " |      builtins.object\n",
      " |  \n",
      " |  Methods defined here:\n",
      " |  \n",
      " |  __init__(self, xy, width, height, angle=0.0, **kwargs)\n",
      " |      Parameters\n",
      " |      ----------\n",
      " |      xy : (float, float)\n",
      " |          The bottom and left rectangle coordinates\n",
      " |      width : float\n",
      " |          Rectangle width\n",
      " |      height : float\n",
      " |          Rectangle height\n",
      " |      angle : float, optional\n",
      " |        rotation in degrees anti-clockwise about *xy* (default is 0.0)\n",
      " |      fill : bool, optional\n",
      " |          Whether to fill the rectangle (default is ``True``)\n",
      " |      \n",
      " |      Notes\n",
      " |      -----\n",
      " |      Valid kwargs are:\n",
      " |        agg_filter: a filter function, which takes a (m, n, 3) float array and a dpi value, and returns a (m, n, 3) array\n",
      " |        alpha: float or None\n",
      " |        animated: bool\n",
      " |        antialiased or aa: unknown\n",
      " |        capstyle: {'butt', 'round', 'projecting'}\n",
      " |        clip_box: `.Bbox`\n",
      " |        clip_on: bool\n",
      " |        clip_path: [(`~matplotlib.path.Path`, `.Transform`) | `.Patch` | None]\n",
      " |        color: color\n",
      " |        contains: callable\n",
      " |        edgecolor or ec: color or None or 'auto'\n",
      " |        facecolor or fc: color or None\n",
      " |        figure: `.Figure`\n",
      " |        fill: bool\n",
      " |        gid: str\n",
      " |        hatch: {'/', '\\\\', '|', '-', '+', 'x', 'o', 'O', '.', '*'}\n",
      " |        in_layout: bool\n",
      " |        joinstyle: {'miter', 'round', 'bevel'}\n",
      " |        label: object\n",
      " |        linestyle or ls: {'-', '--', '-.', ':', '', (offset, on-off-seq), ...}\n",
      " |        linewidth or lw: float or None\n",
      " |        path_effects: `.AbstractPathEffect`\n",
      " |        picker: None or bool or float or callable\n",
      " |        rasterized: bool or None\n",
      " |        sketch_params: (scale: float, length: float, randomness: float)\n",
      " |        snap: bool or None\n",
      " |        transform: `.Transform`\n",
      " |        url: str\n",
      " |        visible: bool\n",
      " |        zorder: float\n",
      " |  \n",
      " |  __str__(self)\n",
      " |      Return str(self).\n",
      " |  \n",
      " |  get_bbox(self)\n",
      " |  \n",
      " |  get_height(self)\n",
      " |      Return the height of the rectangle.\n",
      " |  \n",
      " |  get_patch_transform(self)\n",
      " |      Return the :class:`~matplotlib.transforms.Transform` instance which\n",
      " |      takes patch coordinates to data coordinates.\n",
      " |      \n",
      " |      For example, one may define a patch of a circle which represents a\n",
      " |      radius of 5 by providing coordinates for a unit circle, and a\n",
      " |      transform which scales the coordinates (the patch coordinate) by 5.\n",
      " |  \n",
      " |  get_path(self)\n",
      " |      Return the vertices of the rectangle.\n",
      " |  \n",
      " |  get_width(self)\n",
      " |      Return the width of the rectangle.\n",
      " |  \n",
      " |  get_x(self)\n",
      " |      Return the left coord of the rectangle.\n",
      " |  \n",
      " |  get_xy(self)\n",
      " |      Return the left and bottom coords of the rectangle.\n",
      " |  \n",
      " |  get_y(self)\n",
      " |      Return the bottom coord of the rectangle.\n",
      " |  \n",
      " |  set_bounds(self, *args)\n",
      " |      Set the bounds of the rectangle: l,b,w,h\n",
      " |      \n",
      " |      ACCEPTS: (left, bottom, width, height)\n",
      " |  \n",
      " |  set_height(self, h)\n",
      " |      Set the height of the rectangle.\n",
      " |  \n",
      " |  set_width(self, w)\n",
      " |      Set the width of the rectangle.\n",
      " |  \n",
      " |  set_x(self, x)\n",
      " |      Set the left coord of the rectangle.\n",
      " |  \n",
      " |  set_xy(self, xy)\n",
      " |      Set the left and bottom coords of the rectangle.\n",
      " |      \n",
      " |      Parameters\n",
      " |      ----------\n",
      " |      xy : (float, float)\n",
      " |  \n",
      " |  set_y(self, y)\n",
      " |      Set the bottom coord of the rectangle.\n",
      " |  \n",
      " |  ----------------------------------------------------------------------\n",
      " |  Data descriptors defined here:\n",
      " |  \n",
      " |  xy\n",
      " |      Return the left and bottom coords of the rectangle.\n",
      " |  \n",
      " |  ----------------------------------------------------------------------\n",
      " |  Methods inherited from Patch:\n",
      " |  \n",
      " |  contains(self, mouseevent, radius=None)\n",
      " |      Test whether the mouse event occurred in the patch.\n",
      " |      \n",
      " |      Returns\n",
      " |      -------\n",
      " |      (bool, empty dict)\n",
      " |  \n",
      " |  contains_point(self, point, radius=None)\n",
      " |      Returns ``True`` if the given *point* is inside the path\n",
      " |      (transformed with its transform attribute).\n",
      " |      \n",
      " |      *radius* allows the path to be made slightly larger or smaller.\n",
      " |  \n",
      " |  contains_points(self, points, radius=None)\n",
      " |      Returns a bool array which is ``True`` if the (closed) path\n",
      " |      contains the corresponding point.\n",
      " |      (transformed with its transform attribute).\n",
      " |      \n",
      " |      *points* must be Nx2 array.\n",
      " |      *radius* allows the path to be made slightly larger or smaller.\n",
      " |  \n",
      " |  draw(self, renderer)\n",
      " |      Draw the :class:`Patch` to the given *renderer*.\n",
      " |  \n",
      " |  get_aa(self)\n",
      " |      Alias for `get_antialiased`.\n",
      " |  \n",
      " |  get_antialiased(self)\n",
      " |      Returns True if the :class:`Patch` is to be drawn with antialiasing.\n",
      " |  \n",
      " |  get_capstyle(self)\n",
      " |      Return the current capstyle\n",
      " |  \n",
      " |  get_data_transform(self)\n",
      " |      Return the :class:`~matplotlib.transforms.Transform` instance which\n",
      " |      maps data coordinates to physical coordinates.\n",
      " |  \n",
      " |  get_ec(self)\n",
      " |      Alias for `get_edgecolor`.\n",
      " |  \n",
      " |  get_edgecolor(self)\n",
      " |      Return the edge color of the :class:`Patch`.\n",
      " |  \n",
      " |  get_extents(self)\n",
      " |      Return a :class:`~matplotlib.transforms.Bbox` object defining\n",
      " |      the axis-aligned extents of the :class:`Patch`.\n",
      " |  \n",
      " |  get_facecolor(self)\n",
      " |      Return the face color of the :class:`Patch`.\n",
      " |  \n",
      " |  get_fc(self)\n",
      " |      Alias for `get_facecolor`.\n",
      " |  \n",
      " |  get_fill(self)\n",
      " |      return whether fill is set\n",
      " |  \n",
      " |  get_hatch(self)\n",
      " |      Return the current hatching pattern\n",
      " |  \n",
      " |  get_joinstyle(self)\n",
      " |      Return the current joinstyle\n",
      " |  \n",
      " |  get_linestyle(self)\n",
      " |      Return the linestyle.\n",
      " |  \n",
      " |  get_linewidth(self)\n",
      " |      Return the line width in points.\n",
      " |  \n",
      " |  get_ls(self)\n",
      " |      Alias for `get_linestyle`.\n",
      " |  \n",
      " |  get_lw(self)\n",
      " |      Alias for `get_linewidth`.\n",
      " |  \n",
      " |  get_transform(self)\n",
      " |      Return the :class:`~matplotlib.transforms.Transform` applied\n",
      " |      to the :class:`Patch`.\n",
      " |  \n",
      " |  get_verts(self)\n",
      " |      Return a copy of the vertices used in this patch\n",
      " |      \n",
      " |      If the patch contains Bezier curves, the curves will be\n",
      " |      interpolated by line segments.  To access the curves as\n",
      " |      curves, use :meth:`get_path`.\n",
      " |  \n",
      " |  get_window_extent(self, renderer=None)\n",
      " |      Get the axes bounding box in display space.\n",
      " |      \n",
      " |      The bounding box' width and height are nonnegative.\n",
      " |      \n",
      " |      Subclasses should override for inclusion in the bounding box\n",
      " |      \"tight\" calculation. Default is to return an empty bounding\n",
      " |      box at 0, 0.\n",
      " |      \n",
      " |      Be careful when using this function, the results will not update\n",
      " |      if the artist window extent of the artist changes.  The extent\n",
      " |      can change due to any changes in the transform stack, such as\n",
      " |      changing the axes limits, the figure size, or the canvas used\n",
      " |      (as is done when saving a figure).  This can lead to unexpected\n",
      " |      behavior where interactive figures will look fine on the screen,\n",
      " |      but will save incorrectly.\n",
      " |  \n",
      " |  set_aa(self, aa)\n",
      " |      Alias for `set_antialiased`.\n",
      " |  \n",
      " |  set_alpha(self, alpha)\n",
      " |      Set the alpha transparency of the patch.\n",
      " |      \n",
      " |      Parameters\n",
      " |      ----------\n",
      " |      alpha : float or None\n",
      " |  \n",
      " |  set_antialiased(self, aa)\n",
      " |      Set whether to use antialiased rendering.\n",
      " |      \n",
      " |      Parameters\n",
      " |      ----------\n",
      " |      b : bool or None\n",
      " |  \n",
      " |  set_capstyle(self, s)\n",
      " |      Set the patch capstyle\n",
      " |      \n",
      " |      Parameters\n",
      " |      ----------\n",
      " |      s : {'butt', 'round', 'projecting'}\n",
      " |  \n",
      " |  set_color(self, c)\n",
      " |      Set both the edgecolor and the facecolor.\n",
      " |      \n",
      " |      Parameters\n",
      " |      ----------\n",
      " |      c : color\n",
      " |      \n",
      " |      See Also\n",
      " |      --------\n",
      " |      Patch.set_facecolor, Patch.set_edgecolor\n",
      " |          For setting the edge or face color individually.\n",
      " |  \n",
      " |  set_ec(self, color)\n",
      " |      Alias for `set_edgecolor`.\n",
      " |  \n",
      " |  set_edgecolor(self, color)\n",
      " |      Set the patch edge color.\n",
      " |      \n",
      " |      Parameters\n",
      " |      ----------\n",
      " |      color : color or None or 'auto'\n",
      " |  \n",
      " |  set_facecolor(self, color)\n",
      " |      Set the patch face color.\n",
      " |      \n",
      " |      Parameters\n",
      " |      ----------\n",
      " |      color : color or None\n",
      " |  \n",
      " |  set_fc(self, color)\n",
      " |      Alias for `set_facecolor`.\n",
      " |  \n",
      " |  set_fill(self, b)\n",
      " |      Set whether to fill the patch.\n",
      " |      \n",
      " |      Parameters\n",
      " |      ----------\n",
      " |      b : bool\n",
      " |  \n",
      " |  set_hatch(self, hatch)\n",
      " |      Set the hatching pattern\n",
      " |      \n",
      " |      *hatch* can be one of::\n",
      " |      \n",
      " |        /   - diagonal hatching\n",
      " |        \\   - back diagonal\n",
      " |        |   - vertical\n",
      " |        -   - horizontal\n",
      " |        +   - crossed\n",
      " |        x   - crossed diagonal\n",
      " |        o   - small circle\n",
      " |        O   - large circle\n",
      " |        .   - dots\n",
      " |        *   - stars\n",
      " |      \n",
      " |      Letters can be combined, in which case all the specified\n",
      " |      hatchings are done.  If same letter repeats, it increases the\n",
      " |      density of hatching of that pattern.\n",
      " |      \n",
      " |      Hatching is supported in the PostScript, PDF, SVG and Agg\n",
      " |      backends only.\n",
      " |      \n",
      " |      Parameters\n",
      " |      ----------\n",
      " |      hatch : {'/', '\\\\', '|', '-', '+', 'x', 'o', 'O', '.', '*'}\n",
      " |  \n",
      " |  set_joinstyle(self, s)\n",
      " |      Set the patch joinstyle\n",
      " |      \n",
      " |      Parameters\n",
      " |      ----------\n",
      " |      s : {'miter', 'round', 'bevel'}\n",
      " |  \n",
      " |  set_linestyle(self, ls)\n",
      " |      Set the patch linestyle.\n",
      " |      \n",
      " |      ===========================   =================\n",
      " |      linestyle                     description\n",
      " |      ===========================   =================\n",
      " |      ``'-'`` or ``'solid'``        solid line\n",
      " |      ``'--'`` or  ``'dashed'``     dashed line\n",
      " |      ``'-.'`` or  ``'dashdot'``    dash-dotted line\n",
      " |      ``':'`` or ``'dotted'``       dotted line\n",
      " |      ===========================   =================\n",
      " |      \n",
      " |      Alternatively a dash tuple of the following form can be provided::\n",
      " |      \n",
      " |          (offset, onoffseq),\n",
      " |      \n",
      " |      where ``onoffseq`` is an even length tuple of on and off ink in points.\n",
      " |      \n",
      " |      Parameters\n",
      " |      ----------\n",
      " |      ls : {'-', '--', '-.', ':', '', (offset, on-off-seq), ...}\n",
      " |          The line style.\n",
      " |  \n",
      " |  set_linewidth(self, w)\n",
      " |      Set the patch linewidth in points.\n",
      " |      \n",
      " |      Parameters\n",
      " |      ----------\n",
      " |      w : float or None\n",
      " |  \n",
      " |  set_ls(self, ls)\n",
      " |      Alias for `set_linestyle`.\n",
      " |  \n",
      " |  set_lw(self, w)\n",
      " |      Alias for `set_linewidth`.\n",
      " |  \n",
      " |  update_from(self, other)\n",
      " |      Updates this :class:`Patch` from the properties of *other*.\n",
      " |  \n",
      " |  ----------------------------------------------------------------------\n",
      " |  Data descriptors inherited from Patch:\n",
      " |  \n",
      " |  fill\n",
      " |      return whether fill is set\n",
      " |  \n",
      " |  ----------------------------------------------------------------------\n",
      " |  Data and other attributes inherited from Patch:\n",
      " |  \n",
      " |  validCap = ('butt', 'round', 'projecting')\n",
      " |  \n",
      " |  validJoin = ('miter', 'round', 'bevel')\n",
      " |  \n",
      " |  zorder = 1\n",
      " |  \n",
      " |  ----------------------------------------------------------------------\n",
      " |  Methods inherited from matplotlib.artist.Artist:\n",
      " |  \n",
      " |  __getstate__(self)\n",
      " |  \n",
      " |  add_callback(self, func)\n",
      " |      Add a callback function that will be called whenever one of the\n",
      " |      `.Artist`'s properties changes.\n",
      " |      \n",
      " |      Parameters\n",
      " |      ----------\n",
      " |      func : callable\n",
      " |          The callback function. It must have the signature::\n",
      " |      \n",
      " |              def func(artist: Artist) -> Any\n",
      " |      \n",
      " |          where *artist* is the calling `.Artist`. Return values may exist\n",
      " |          but are ignored.\n",
      " |      \n",
      " |      Returns\n",
      " |      -------\n",
      " |      oid : int\n",
      " |          The observer id associated with the callback. This id can be\n",
      " |          used for removing the callback with `.remove_callback` later.\n",
      " |      \n",
      " |      See Also\n",
      " |      --------\n",
      " |      remove_callback\n",
      " |  \n",
      " |  convert_xunits(self, x)\n",
      " |      Convert *x* using the unit type of the xaxis.\n",
      " |      \n",
      " |      If the artist is not in contained in an Axes or if the xaxis does not\n",
      " |      have units, *x* itself is returned.\n",
      " |  \n",
      " |  convert_yunits(self, y)\n",
      " |      Convert *y* using the unit type of the yaxis.\n",
      " |      \n",
      " |      If the artist is not in contained in an Axes or if the yaxis does not\n",
      " |      have units, *y* itself is returned.\n",
      " |  \n",
      " |  findobj(self, match=None, include_self=True)\n",
      " |      Find artist objects.\n",
      " |      \n",
      " |      Recursively find all `.Artist` instances contained in the artist.\n",
      " |      \n",
      " |      Parameters\n",
      " |      ----------\n",
      " |      match\n",
      " |          A filter criterion for the matches. This can be\n",
      " |      \n",
      " |          - *None*: Return all objects contained in artist.\n",
      " |          - A function with signature ``def match(artist: Artist) -> bool``.\n",
      " |            The result will only contain artists for which the function\n",
      " |            returns *True*.\n",
      " |          - A class instance: e.g., `.Line2D`. The result will only contain\n",
      " |            artists of this class or its subclasses (``isinstance`` check).\n",
      " |      \n",
      " |      include_self : bool\n",
      " |          Include *self* in the list to be checked for a match.\n",
      " |      \n",
      " |      Returns\n",
      " |      -------\n",
      " |      artists : list of `.Artist`\n",
      " |  \n",
      " |  format_cursor_data(self, data)\n",
      " |      Return a string representation of *data*.\n",
      " |      \n",
      " |      .. note::\n",
      " |          This method is intended to be overridden by artist subclasses.\n",
      " |          As an end-user of Matplotlib you will most likely not call this\n",
      " |          method yourself.\n",
      " |      \n",
      " |      The default implementation converts ints and floats and arrays of ints\n",
      " |      and floats into a comma-separated string enclosed in square brackets.\n",
      " |      \n",
      " |      See Also\n",
      " |      --------\n",
      " |      get_cursor_data\n",
      " |  \n",
      " |  get_agg_filter(self)\n",
      " |      Return filter function to be used for agg filter.\n",
      " |  \n",
      " |  get_alpha(self)\n",
      " |      Return the alpha value used for blending - not supported on all\n",
      " |      backends\n",
      " |  \n",
      " |  get_animated(self)\n",
      " |      Return the animated state.\n",
      " |  \n",
      " |  get_children(self)\n",
      " |      Return a list of the child `.Artist`\\s of this `.Artist`.\n",
      " |  \n",
      " |  get_clip_box(self)\n",
      " |      Return the clipbox.\n",
      " |  \n",
      " |  get_clip_on(self)\n",
      " |      Return whether the artist uses clipping.\n",
      " |  \n",
      " |  get_clip_path(self)\n",
      " |      Return the clip path.\n",
      " |  \n",
      " |  get_contains(self)\n",
      " |      Return the custom contains function of the artist if set, or *None*.\n",
      " |      \n",
      " |      See Also\n",
      " |      --------\n",
      " |      set_contains\n",
      " |  \n",
      " |  get_cursor_data(self, event)\n",
      " |      Return the cursor data for a given event.\n",
      " |      \n",
      " |      .. note::\n",
      " |          This method is intended to be overridden by artist subclasses.\n",
      " |          As an end-user of Matplotlib you will most likely not call this\n",
      " |          method yourself.\n",
      " |      \n",
      " |      Cursor data can be used by Artists to provide additional context\n",
      " |      information for a given event. The default implementation just returns\n",
      " |      *None*.\n",
      " |      \n",
      " |      Subclasses can override the method and return arbitrary data. However,\n",
      " |      when doing so, they must ensure that `.format_cursor_data` can convert\n",
      " |      the data to a string representation.\n",
      " |      \n",
      " |      The only current use case is displaying the z-value of an `.AxesImage`\n",
      " |      in the status bar of a plot window, while moving the mouse.\n",
      " |      \n",
      " |      Parameters\n",
      " |      ----------\n",
      " |      event : `matplotlib.backend_bases.MouseEvent`\n",
      " |      \n",
      " |      See Also\n",
      " |      --------\n",
      " |      format_cursor_data\n",
      " |  \n",
      " |  get_figure(self)\n",
      " |      Return the `.Figure` instance the artist belongs to.\n",
      " |  \n",
      " |  get_gid(self)\n",
      " |      Return the group id.\n",
      " |  \n",
      " |  get_in_layout(self)\n",
      " |      Return boolean flag, ``True`` if artist is included in layout\n",
      " |      calculations.\n",
      " |      \n",
      " |      E.g. :doc:`/tutorials/intermediate/constrainedlayout_guide`,\n",
      " |      `.Figure.tight_layout()`, and\n",
      " |      ``fig.savefig(fname, bbox_inches='tight')``.\n",
      " |  \n",
      " |  get_label(self)\n",
      " |      Return the label used for this artist in the legend.\n",
      " |  \n",
      " |  get_path_effects(self)\n",
      " |  \n",
      " |  get_picker(self)\n",
      " |      Return the picking behavior of the artist.\n",
      " |      \n",
      " |      The possible values are described in `.set_picker`.\n",
      " |      \n",
      " |      See Also\n",
      " |      --------\n",
      " |      set_picker, pickable, pick\n",
      " |  \n",
      " |  get_rasterized(self)\n",
      " |      Return whether the artist is to be rasterized.\n",
      " |  \n",
      " |  get_sketch_params(self)\n",
      " |      Returns the sketch parameters for the artist.\n",
      " |      \n",
      " |      Returns\n",
      " |      -------\n",
      " |      sketch_params : tuple or None\n",
      " |      \n",
      " |          A 3-tuple with the following elements:\n",
      " |      \n",
      " |          - *scale*: The amplitude of the wiggle perpendicular to the\n",
      " |            source line.\n",
      " |          - *length*: The length of the wiggle along the line.\n",
      " |          - *randomness*: The scale factor by which the length is\n",
      " |            shrunken or expanded.\n",
      " |      \n",
      " |          Returns *None* if no sketch parameters were set.\n",
      " |  \n",
      " |  get_snap(self)\n",
      " |      Returns the snap setting.\n",
      " |      \n",
      " |      See `.set_snap` for details.\n",
      " |  \n",
      " |  get_tightbbox(self, renderer)\n",
      " |      Like `Artist.get_window_extent`, but includes any clipping.\n",
      " |      \n",
      " |      Parameters\n",
      " |      ----------\n",
      " |      renderer : `.RendererBase` instance\n",
      " |          renderer that will be used to draw the figures (i.e.\n",
      " |          ``fig.canvas.get_renderer()``)\n",
      " |      \n",
      " |      Returns\n",
      " |      -------\n",
      " |      bbox : `.BBox`\n",
      " |          The enclosing bounding box (in figure pixel co-ordinates).\n",
      " |  \n",
      " |  get_transformed_clip_path_and_affine(self)\n",
      " |      Return the clip path with the non-affine part of its\n",
      " |      transformation applied, and the remaining affine part of its\n",
      " |      transformation.\n",
      " |  \n",
      " |  get_url(self)\n",
      " |      Return the url.\n",
      " |  \n",
      " |  get_visible(self)\n",
      " |      Return the visibility.\n",
      " |  \n",
      " |  get_zorder(self)\n",
      " |      Return the artist's zorder.\n",
      " |  \n",
      " |  have_units(self)\n",
      " |      Return *True* if units are set on the *x* or *y* axes.\n",
      " |  \n",
      " |  is_transform_set(self)\n",
      " |      Return whether the Artist has an explicitly set transform.\n",
      " |      \n",
      " |      This is *True* after `.set_transform` has been called.\n",
      " |  \n",
      " |  pchanged(self)\n",
      " |      Call all of the registered callbacks.\n",
      " |      \n",
      " |      This function is triggered internally when a property is changed.\n",
      " |      \n",
      " |      See Also\n",
      " |      --------\n",
      " |      add_callback\n",
      " |      remove_callback\n",
      " |  \n",
      " |  pick(self, mouseevent)\n",
      " |      Process a pick event.\n",
      " |      \n",
      " |      Each child artist will fire a pick event if *mouseevent* is over\n",
      " |      the artist and the artist has picker set.\n",
      " |      \n",
      " |      See Also\n",
      " |      --------\n",
      " |      set_picker, get_picker, pickable\n",
      " |  \n",
      " |  pickable(self)\n",
      " |      Return whether the artist is pickable.\n",
      " |      \n",
      " |      See Also\n",
      " |      --------\n",
      " |      set_picker, get_picker, pick\n",
      " |  \n",
      " |  properties(self)\n",
      " |      Return a dictionary of all the properties of the artist.\n",
      " |  \n",
      " |  remove(self)\n",
      " |      Remove the artist from the figure if possible.\n",
      " |      \n",
      " |      The effect will not be visible until the figure is redrawn, e.g.,\n",
      " |      with `.FigureCanvasBase.draw_idle`.  Call `~.axes.Axes.relim` to\n",
      " |      update the axes limits if desired.\n",
      " |      \n",
      " |      Note: `~.axes.Axes.relim` will not see collections even if the\n",
      " |      collection was added to the axes with *autolim* = True.\n",
      " |      \n",
      " |      Note: there is no support for removing the artist's legend entry.\n",
      " |  \n",
      " |  remove_callback(self, oid)\n",
      " |      Remove a callback based on its observer id.\n",
      " |      \n",
      " |      See Also\n",
      " |      --------\n",
      " |      add_callback\n",
      " |  \n",
      " |  set(self, **kwargs)\n",
      " |      A property batch setter.  Pass *kwargs* to set properties.\n",
      " |  \n",
      " |  set_agg_filter(self, filter_func)\n",
      " |      Set the agg filter.\n",
      " |      \n",
      " |      Parameters\n",
      " |      ----------\n",
      " |      filter_func : callable\n",
      " |          A filter function, which takes a (m, n, 3) float array and a dpi\n",
      " |          value, and returns a (m, n, 3) array.\n",
      " |      \n",
      " |          .. ACCEPTS: a filter function, which takes a (m, n, 3) float array\n",
      " |              and a dpi value, and returns a (m, n, 3) array\n",
      " |  \n",
      " |  set_animated(self, b)\n",
      " |      Set the artist's animation state.\n",
      " |      \n",
      " |      Parameters\n",
      " |      ----------\n",
      " |      b : bool\n",
      " |  \n",
      " |  set_clip_box(self, clipbox)\n",
      " |      Set the artist's clip `.Bbox`.\n",
      " |      \n",
      " |      Parameters\n",
      " |      ----------\n",
      " |      clipbox : `.Bbox`\n",
      " |  \n",
      " |  set_clip_on(self, b)\n",
      " |      Set whether the artist uses clipping.\n",
      " |      \n",
      " |      When False artists will be visible out side of the axes which\n",
      " |      can lead to unexpected results.\n",
      " |      \n",
      " |      Parameters\n",
      " |      ----------\n",
      " |      b : bool\n",
      " |  \n",
      " |  set_clip_path(self, path, transform=None)\n",
      " |      Set the artist's clip path, which may be:\n",
      " |      \n",
      " |      - a :class:`~matplotlib.patches.Patch` (or subclass) instance; or\n",
      " |      - a :class:`~matplotlib.path.Path` instance, in which case a\n",
      " |        :class:`~matplotlib.transforms.Transform` instance, which will be\n",
      " |        applied to the path before using it for clipping, must be provided;\n",
      " |        or\n",
      " |      - ``None``, to remove a previously set clipping path.\n",
      " |      \n",
      " |      For efficiency, if the path happens to be an axis-aligned rectangle,\n",
      " |      this method will set the clipping box to the corresponding rectangle\n",
      " |      and set the clipping path to ``None``.\n",
      " |      \n",
      " |      ACCEPTS: [(`~matplotlib.path.Path`, `.Transform`) | `.Patch` | None]\n",
      " |  \n",
      " |  set_contains(self, picker)\n",
      " |      Define a custom contains test for the artist.\n",
      " |      \n",
      " |      The provided callable replaces the default `.contains` method\n",
      " |      of the artist.\n",
      " |      \n",
      " |      Parameters\n",
      " |      ----------\n",
      " |      picker : callable\n",
      " |          A custom picker function to evaluate if an event is within the\n",
      " |          artist. The function must have the signature::\n",
      " |      \n",
      " |              def contains(artist: Artist, event: MouseEvent) -> bool, dict\n",
      " |      \n",
      " |          that returns:\n",
      " |      \n",
      " |          - a bool indicating if the event is within the artist\n",
      " |          - a dict of additional information. The dict should at least\n",
      " |            return the same information as the default ``contains()``\n",
      " |            implementation of the respective artist, but may provide\n",
      " |            additional information.\n",
      " |  \n",
      " |  set_figure(self, fig)\n",
      " |      Set the `.Figure` instance the artist belongs to.\n",
      " |      \n",
      " |      Parameters\n",
      " |      ----------\n",
      " |      fig : `.Figure`\n",
      " |  \n",
      " |  set_gid(self, gid)\n",
      " |      Set the (group) id for the artist.\n",
      " |      \n",
      " |      Parameters\n",
      " |      ----------\n",
      " |      gid : str\n",
      " |  \n",
      " |  set_in_layout(self, in_layout)\n",
      " |      Set if artist is to be included in layout calculations,\n",
      " |      E.g. :doc:`/tutorials/intermediate/constrainedlayout_guide`,\n",
      " |      `.Figure.tight_layout()`, and\n",
      " |      ``fig.savefig(fname, bbox_inches='tight')``.\n",
      " |      \n",
      " |      Parameters\n",
      " |      ----------\n",
      " |      in_layout : bool\n",
      " |  \n",
      " |  set_label(self, s)\n",
      " |      Set a label that will be displayed in the legend.\n",
      " |      \n",
      " |      Parameters\n",
      " |      ----------\n",
      " |      s : object\n",
      " |          *s* will be converted to a string by calling `str`.\n",
      " |  \n",
      " |  set_path_effects(self, path_effects)\n",
      " |      Set the path effects.\n",
      " |      \n",
      " |      Parameters\n",
      " |      ----------\n",
      " |      path_effects : `.AbstractPathEffect`\n",
      " |  \n",
      " |  set_picker(self, picker)\n",
      " |      Define the picking behavior of the artist.\n",
      " |      \n",
      " |      Parameters\n",
      " |      ----------\n",
      " |      picker : None or bool or float or callable\n",
      " |          This can be one of the following:\n",
      " |      \n",
      " |          - *None*: Picking is disabled for this artist (default).\n",
      " |      \n",
      " |          - A boolean: If *True* then picking will be enabled and the\n",
      " |            artist will fire a pick event if the mouse event is over\n",
      " |            the artist.\n",
      " |      \n",
      " |          - A float: If picker is a number it is interpreted as an\n",
      " |            epsilon tolerance in points and the artist will fire\n",
      " |            off an event if it's data is within epsilon of the mouse\n",
      " |            event.  For some artists like lines and patch collections,\n",
      " |            the artist may provide additional data to the pick event\n",
      " |            that is generated, e.g., the indices of the data within\n",
      " |            epsilon of the pick event\n",
      " |      \n",
      " |          - A function: If picker is callable, it is a user supplied\n",
      " |            function which determines whether the artist is hit by the\n",
      " |            mouse event::\n",
      " |      \n",
      " |              hit, props = picker(artist, mouseevent)\n",
      " |      \n",
      " |            to determine the hit test.  if the mouse event is over the\n",
      " |            artist, return *hit=True* and props is a dictionary of\n",
      " |            properties you want added to the PickEvent attributes.\n",
      " |  \n",
      " |  set_rasterized(self, rasterized)\n",
      " |      Force rasterized (bitmap) drawing in vector backend output.\n",
      " |      \n",
      " |      Defaults to None, which implies the backend's default behavior.\n",
      " |      \n",
      " |      Parameters\n",
      " |      ----------\n",
      " |      rasterized : bool or None\n",
      " |  \n",
      " |  set_sketch_params(self, scale=None, length=None, randomness=None)\n",
      " |      Sets the sketch parameters.\n",
      " |      \n",
      " |      Parameters\n",
      " |      ----------\n",
      " |      \n",
      " |      scale : float, optional\n",
      " |          The amplitude of the wiggle perpendicular to the source\n",
      " |          line, in pixels.  If scale is `None`, or not provided, no\n",
      " |          sketch filter will be provided.\n",
      " |      \n",
      " |      length : float, optional\n",
      " |           The length of the wiggle along the line, in pixels\n",
      " |           (default 128.0)\n",
      " |      \n",
      " |      randomness : float, optional\n",
      " |          The scale factor by which the length is shrunken or\n",
      " |          expanded (default 16.0)\n",
      " |      \n",
      " |          .. ACCEPTS: (scale: float, length: float, randomness: float)\n",
      " |  \n",
      " |  set_snap(self, snap)\n",
      " |      Set the snapping behavior.\n",
      " |      \n",
      " |      Snapping aligns positions with the pixel grid, which results in\n",
      " |      clearer images. For example, if a black line of 1px width was\n",
      " |      defined at a position in between two pixels, the resulting image\n",
      " |      would contain the interpolated value of that line in the pixel grid,\n",
      " |      which would be a grey value on both adjacent pixel positions. In\n",
      " |      contrast, snapping will move the line to the nearest integer pixel\n",
      " |      value, so that the resulting image will really contain a 1px wide\n",
      " |      black line.\n",
      " |      \n",
      " |      Snapping is currently only supported by the Agg and MacOSX backends.\n",
      " |      \n",
      " |      Parameters\n",
      " |      ----------\n",
      " |      snap : bool or None\n",
      " |          Possible values:\n",
      " |      \n",
      " |          - *True*: Snap vertices to the nearest pixel center.\n",
      " |          - *False*: Do not modify vertex positions.\n",
      " |          - *None*: (auto) If the path contains only rectilinear line\n",
      " |            segments, round to the nearest pixel center.\n",
      " |  \n",
      " |  set_transform(self, t)\n",
      " |      Set the artist transform.\n",
      " |      \n",
      " |      Parameters\n",
      " |      ----------\n",
      " |      t : `.Transform`\n",
      " |  \n",
      " |  set_url(self, url)\n",
      " |      Set the url for the artist.\n",
      " |      \n",
      " |      Parameters\n",
      " |      ----------\n",
      " |      url : str\n",
      " |  \n",
      " |  set_visible(self, b)\n",
      " |      Set the artist's visibility.\n",
      " |      \n",
      " |      Parameters\n",
      " |      ----------\n",
      " |      b : bool\n",
      " |  \n",
      " |  set_zorder(self, level)\n",
      " |      Set the zorder for the artist.  Artists with lower zorder\n",
      " |      values are drawn first.\n",
      " |      \n",
      " |      Parameters\n",
      " |      ----------\n",
      " |      level : float\n",
      " |  \n",
      " |  update(self, props)\n",
      " |      Update this artist's properties from the dictionary *props*.\n",
      " |  \n",
      " |  ----------------------------------------------------------------------\n",
      " |  Data descriptors inherited from matplotlib.artist.Artist:\n",
      " |  \n",
      " |  __dict__\n",
      " |      dictionary for instance variables (if defined)\n",
      " |  \n",
      " |  __weakref__\n",
      " |      list of weak references to the object (if defined)\n",
      " |  \n",
      " |  aname\n",
      " |  \n",
      " |  axes\n",
      " |      The `~.axes.Axes` instance the artist resides in, or *None*.\n",
      " |  \n",
      " |  mouseover\n",
      " |  \n",
      " |  stale\n",
      " |      Whether the artist is 'stale' and needs to be re-drawn for the output\n",
      " |      to match the internal state of the artist.\n",
      " |  \n",
      " |  sticky_edges\n",
      " |      ``x`` and ``y`` sticky edge lists for autoscaling.\n",
      " |      \n",
      " |      When performing autoscaling, if a data limit coincides with a value in\n",
      " |      the corresponding sticky_edges list, then no margin will be added--the\n",
      " |      view limit \"sticks\" to the edge. A typical use case is histograms,\n",
      " |      where one usually expects no margin on the bottom edge (0) of the\n",
      " |      histogram.\n",
      " |      \n",
      " |      This attribute cannot be assigned to; however, the ``x`` and ``y``\n",
      " |      lists can be modified in place as needed.\n",
      " |      \n",
      " |      Examples\n",
      " |      --------\n",
      " |      \n",
      " |      >>> artist.sticky_edges.x[:] = (xmin, xmax)\n",
      " |      >>> artist.sticky_edges.y[:] = (ymin, ymax)\n",
      "\n"
     ]
    }
   ],
   "source": [
    "help(pat.Rectangle)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "[\n",
    "    {\"text\": \"America 1800~1820\", \"focusArgs\": [[1800, 1820], [\"United States\"]]},\n",
    "    {\"text\": \" no focus \", \"focusArgs\": null},\n",
    "    {\"text\": \" 1900~2000 \", \"focusArgs\": [[1900, 2000], null]},\n",
    "    {\"text\": \" Japan \", \"focusArgs\": [null, [\"Japan\"]]},\n",
    "    {\"text\": \"Japan 1990~2000\", \"focusArgs\": [[1990, 2000], [\"Japan\"]]}\n",
    "]\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "metadata": {},
   "outputs": [],
   "source": [
    "str.format?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'1joge'"
      ]
     },
     "execution_count": 90,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "'{country}joge'.format(country=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "metadata": {},
   "outputs": [],
   "source": [
    "template = \"{country}'s {ind} has {ptype} ({from_} ~ {to_})\\n\"\n",
    "template_A = \"{country}'s {ind} has peak from {from_} to {to_}\\n\"\n",
    "template_B = \"{country}'s {ind}'s tread has changed from {from_} to {to_}\\n\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "ef38b879de3d48468d1a41176588bc25",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "HBox(children=(HTML(value=''), FloatProgress(value=0.0, max=180.0), HTML(value='')))"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/hirotanaka/.pyenv/versions/miniconda3-4.3.30/envs/tdb/lib/python3.7/site-packages/ipykernel_launcher.py:45: FutureWarning: `rcond` parameter will change to the default of machine precision times ``max(M, N)`` where M and N are the input matrix dimensions.\n",
      "To use the future default and silence this warning we advise to pass `rcond=None`, to keep using the old, explicitly pass `rcond=-1`.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n"
     ]
    },
    {
     "ename": "IndexError",
     "evalue": "list index out of range",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mIndexError\u001b[0m                                Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-84-ea1189df121b>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m     11\u001b[0m     \u001b[0;32mfor\u001b[0m \u001b[0mind\u001b[0m \u001b[0;32min\u001b[0m \u001b[0;34m'income population lifeExpectancy'\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msplit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     12\u001b[0m         \u001b[0mys\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdf\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mind\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 13\u001b[0;31m         \u001b[0;32mfor\u001b[0m \u001b[0mfrom_\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mto_\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mptype\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mA\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mys\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mwindow_size_A\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     14\u001b[0m             \u001b[0mfrom_\u001b[0m \u001b[0;34m+=\u001b[0m \u001b[0;36m1800\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     15\u001b[0m             \u001b[0mto_\u001b[0m \u001b[0;34m+=\u001b[0m \u001b[0;36m1800\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m<ipython-input-82-b2a5574f75af>\u001b[0m in \u001b[0;36mA\u001b[0;34m(ys, window_size, K)\u001b[0m\n\u001b[1;32m     20\u001b[0m     \u001b[0mpeaks\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0msorted\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpeaks\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkey\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mlambda\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     21\u001b[0m     \u001b[0mret\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 22\u001b[0;31m     \u001b[0mpre_from_\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mpre_to_\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mp_type_pre\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mv\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpeaks\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     23\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mv\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     24\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mret\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mIndexError\u001b[0m: list index out of range"
     ]
    }
   ],
   "source": [
    "window_size_A = 6\n",
    "window_size_B = 4\n",
    "window_size_C = 4\n",
    "\n",
    "g = new_nations.groupby('name')\n",
    "data = []\n",
    "for country in tqdm(g.groups.keys()):\n",
    "    df = g.get_group(country).sort_values('year').set_index('year').interpolate('time')\n",
    "    data.append({'text': country,\n",
    "                'focusArgs': [None, [country]]})\n",
    "    for ind in 'income population lifeExpectancy'.split():\n",
    "        ys = df[ind]\n",
    "        for from_, to_, ptype in A(ys, window_size_A):\n",
    "            from_ += 1800\n",
    "            to_ += 1800\n",
    "            d_ = {'text': template.format(country=country, ind=ind, from_=from_, to_=to_, ptype=ptype),\n",
    "                'focusArgs': [[from_, to_], [country]]}\n",
    "            data.append(d_)\n",
    "        for from_, to_, ptype in B(ys, window_size_B):\n",
    "            from_ += 1800\n",
    "            to_ += 1800\n",
    "            d_ = {'text': template.format(country=country, ind=ind, from_=from_, to_=to_, ptype=ptype),\n",
    "                'focusArgs': [[from_, to_], [country]]}\n",
    "            data.append(d_)\n",
    "        for from_, to_, ptype in large_grad(ys, window_size_C):\n",
    "            from_ += 1800\n",
    "            to_ += 1800\n",
    "            d_ = {'text': template.format(country=country, ind=ind, from_=from_, to_=to_, ptype=ptype),\n",
    "                'focusArgs': [[from_, to_], [country]]}\n",
    "            data.append(d_)\n",
    "\"\"\"\n",
    "with open('../public/afghan.json', 'w') as  f:\n",
    "    json_text = json.dumps(data)\n",
    "    f.write(json_text)\n",
    "\"\"\"\n",
    "len(data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 108,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['BACKSLASH',\n",
       " 'FLAGS',\n",
       " 'JSONArray',\n",
       " 'JSONDecodeError',\n",
       " 'JSONDecoder',\n",
       " 'JSONObject',\n",
       " 'NaN',\n",
       " 'NegInf',\n",
       " 'PosInf',\n",
       " 'STRINGCHUNK',\n",
       " 'WHITESPACE',\n",
       " 'WHITESPACE_STR',\n",
       " '_CONSTANTS',\n",
       " '__all__',\n",
       " '__builtins__',\n",
       " '__cached__',\n",
       " '__doc__',\n",
       " '__file__',\n",
       " '__loader__',\n",
       " '__name__',\n",
       " '__package__',\n",
       " '__spec__',\n",
       " '_decode_uXXXX',\n",
       " 'c_scanstring',\n",
       " 'py_scanstring',\n",
       " 're',\n",
       " 'scanner',\n",
       " 'scanstring']"
      ]
     },
     "execution_count": 108,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dir(json.decoder)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 116,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[{'text': \"Afghanistan's income has peak from 181 to 185\",\n",
       "  'focus_args': [[181, 185], ['Afghanistan']]},\n",
       " {'text': \"Afghanistan's income has peak from 175 to 179\",\n",
       "  'focus_args': [[175, 179], ['Afghanistan']]},\n",
       " {'text': \"Afghanistan's income has peak from 197 to 201\",\n",
       "  'focus_args': [[197, 201], ['Afghanistan']]},\n",
       " {'text': \"Afghanistan's income has peak from 164 to 168\",\n",
       "  'focus_args': [[164, 168], ['Afghanistan']]},\n",
       " {'text': \"Afghanistan's income has peak from 154 to 158\",\n",
       "  'focus_args': [[154, 158], ['Afghanistan']]},\n",
       " {'text': \"Afghanistan's income's tread has changed from 178 to 183\",\n",
       "  'focus_args': [[178, 183], ['Afghanistan']]},\n",
       " {'text': \"Afghanistan's income's tread has changed from 180 to 185\",\n",
       "  'focus_args': [[180, 185], ['Afghanistan']]},\n",
       " {'text': \"Afghanistan's income's tread has changed from 181 to 186\",\n",
       "  'focus_args': [[181, 186], ['Afghanistan']]},\n",
       " {'text': \"Afghanistan's income's tread has changed from 183 to 188\",\n",
       "  'focus_args': [[183, 188], ['Afghanistan']]},\n",
       " {'text': \"Afghanistan's income's tread has changed from 184 to 189\",\n",
       "  'focus_args': [[184, 189], ['Afghanistan']]},\n",
       " {'text': \"Afghanistan's income's tread has changed from 186 to 191\",\n",
       "  'focus_args': [[186, 191], ['Afghanistan']]},\n",
       " {'text': \"Afghanistan's income's tread has changed from 191 to 196\",\n",
       "  'focus_args': [[191, 196], ['Afghanistan']]},\n",
       " {'text': \"Afghanistan's income's tread has changed from 192 to 197\",\n",
       "  'focus_args': [[192, 197], ['Afghanistan']]},\n",
       " {'text': \"Afghanistan's income's tread has changed from 199 to 204\",\n",
       "  'focus_args': [[199, 204], ['Afghanistan']]},\n",
       " {'text': \"Afghanistan's income's tread has changed from 205 to 210\",\n",
       "  'focus_args': [[205, 210], ['Afghanistan']]},\n",
       " {'text': \"Afghanistan's population has peak from 180 to 184\",\n",
       "  'focus_args': [[180, 184], ['Afghanistan']]},\n",
       " {'text': \"Afghanistan's population has peak from 207 to 210\",\n",
       "  'focus_args': [[207, 210], ['Afghanistan']]},\n",
       " {'text': \"Afghanistan's population has peak from 73 to 77\",\n",
       "  'focus_args': [[73, 77], ['Afghanistan']]},\n",
       " {'text': \"Afghanistan's population has peak from 72 to 76\",\n",
       "  'focus_args': [[72, 76], ['Afghanistan']]},\n",
       " {'text': \"Afghanistan's population has peak from 71 to 75\",\n",
       "  'focus_args': [[71, 75], ['Afghanistan']]},\n",
       " {'text': \"Afghanistan's population's tread has changed from 177 to 182\",\n",
       "  'focus_args': [[177, 182], ['Afghanistan']]},\n",
       " {'text': \"Afghanistan's population's tread has changed from 178 to 183\",\n",
       "  'focus_args': [[178, 183], ['Afghanistan']]},\n",
       " {'text': \"Afghanistan's population's tread has changed from 180 to 185\",\n",
       "  'focus_args': [[180, 185], ['Afghanistan']]},\n",
       " {'text': \"Afghanistan's population's tread has changed from 181 to 186\",\n",
       "  'focus_args': [[181, 186], ['Afghanistan']]},\n",
       " {'text': \"Afghanistan's population's tread has changed from 189 to 194\",\n",
       "  'focus_args': [[189, 194], ['Afghanistan']]},\n",
       " {'text': \"Afghanistan's population's tread has changed from 190 to 195\",\n",
       "  'focus_args': [[190, 195], ['Afghanistan']]},\n",
       " {'text': \"Afghanistan's population's tread has changed from 192 to 197\",\n",
       "  'focus_args': [[192, 197], ['Afghanistan']]},\n",
       " {'text': \"Afghanistan's population's tread has changed from 199 to 204\",\n",
       "  'focus_args': [[199, 204], ['Afghanistan']]},\n",
       " {'text': \"Afghanistan's population's tread has changed from 200 to 205\",\n",
       "  'focus_args': [[200, 205], ['Afghanistan']]},\n",
       " {'text': \"Afghanistan's lifeExpectancy has peak from 194 to 198\",\n",
       "  'focus_args': [[194, 198], ['Afghanistan']]},\n",
       " {'text': \"Afghanistan's lifeExpectancy has peak from 62 to 66\",\n",
       "  'focus_args': [[62, 66], ['Afghanistan']]},\n",
       " {'text': \"Afghanistan's lifeExpectancy has peak from 73 to 77\",\n",
       "  'focus_args': [[73, 77], ['Afghanistan']]},\n",
       " {'text': \"Afghanistan's lifeExpectancy has peak from 72 to 76\",\n",
       "  'focus_args': [[72, 76], ['Afghanistan']]},\n",
       " {'text': \"Afghanistan's lifeExpectancy has peak from 71 to 75\",\n",
       "  'focus_args': [[71, 75], ['Afghanistan']]},\n",
       " {'text': \"Afghanistan's lifeExpectancy's tread has changed from 148 to 153\",\n",
       "  'focus_args': [[148, 153], ['Afghanistan']]},\n",
       " {'text': \"Afghanistan's lifeExpectancy's tread has changed from 149 to 154\",\n",
       "  'focus_args': [[149, 154], ['Afghanistan']]},\n",
       " {'text': \"Afghanistan's lifeExpectancy's tread has changed from 199 to 204\",\n",
       "  'focus_args': [[199, 204], ['Afghanistan']]},\n",
       " {'text': \"Afghanistan's lifeExpectancy's tread has changed from 200 to 205\",\n",
       "  'focus_args': [[200, 205], ['Afghanistan']]},\n",
       " {'text': \"Afghanistan's lifeExpectancy's tread has changed from 201 to 206\",\n",
       "  'focus_args': [[201, 206], ['Afghanistan']]}]"
      ]
     },
     "execution_count": 116,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "with open('../public/afghan.json') as  f:\n",
    "    tmp = json.load(f)\n",
    "tmp"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "209 210\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/hirotanaka/.pyenv/versions/miniconda3-4.3.30/envs/tdb/lib/python3.7/site-packages/ipykernel_launcher.py:26: FutureWarning: `rcond` parameter will change to the default of machine precision times ``max(M, N)`` where M and N are the input matrix dimensions.\n",
      "To use the future default and silence this warning we advise to pass `rcond=None`, to keep using the old, explicitly pass `rcond=-1`.\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "10"
      ]
     },
     "execution_count": 62,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(B(ys, 5))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "ename": "AttributeError",
     "evalue": "module 'matplotlib.pyplot' has no attribute 'rect'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-40-af4237d73a86>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrect\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[0;31mAttributeError\u001b[0m: module 'matplotlib.pyplot' has no attribute 'rect'"
     ]
    }
   ],
   "source": [
    "plt.rect"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/hirotanaka/.pyenv/versions/miniconda3-4.3.30/envs/tdb/lib/python3.7/site-packages/ipykernel_launcher.py:35: FutureWarning: `rcond` parameter will change to the default of machine precision times ``max(M, N)`` where M and N are the input matrix dimensions.\n",
      "To use the future default and silence this warning we advise to pass `rcond=None`, to keep using the old, explicitly pass `rcond=-1`.\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "210"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(grads(df['income'], 5))"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
